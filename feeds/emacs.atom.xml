<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thibault Lestang - Emacs</title><link href="/" rel="alternate"></link><link href="/feeds/emacs.atom.xml" rel="self"></link><id>/</id><updated>2021-01-27T00:00:00+00:00</updated><entry><title>Keeping track of tasks and projects with GNU Emacs and Org Mode</title><link href="/blog/keeping-track-of-tasks-and-projects-using-emacs-and-org-mode.html" rel="alternate"></link><published>2021-01-27T00:00:00+00:00</published><updated>2021-01-27T00:00:00+00:00</updated><author><name>Thibault Lestang</name></author><id>tag:None,2021-01-27:/blog/keeping-track-of-tasks-and-projects-using-emacs-and-org-mode.html</id><summary type="html">&lt;p&gt;
Org-mode is a set of functionalities inside GNU Emacs, geared towards
note-taking, structuring text and managing tasks.  These
functionalities become available with activating Org-Mode (&lt;code&gt;M-x
org-mode&lt;/code&gt;) or simply by opening a file with the &lt;code&gt;.org&lt;/code&gt; extension.
&lt;/p&gt;

&lt;p&gt;
Org is an incredibly broad mode. Just as Emacs itself goes beyond
being a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;
Org-mode is a set of functionalities inside GNU Emacs, geared towards
note-taking, structuring text and managing tasks.  These
functionalities become available with activating Org-Mode (&lt;code&gt;M-x
org-mode&lt;/code&gt;) or simply by opening a file with the &lt;code&gt;.org&lt;/code&gt; extension.
&lt;/p&gt;

&lt;p&gt;
Org is an incredibly broad mode. Just as Emacs itself goes beyond
being a text editor, Org Mode is much more than a note taking app
running in Emacs. In fact, it is useful to see Org not so much as an
organisational solution, but rather as a toolbox for building
organisational solutions.
&lt;/p&gt;

&lt;p&gt;
From a beginner's point of view however, Org is easy to get started
with.  Taking structured notes, folding, reordering and jumping
between headlines requires no configuration and already provide great
benefits a zero cost.  Exporting notes to HTML or ODT files is available
out of the box, a keystroke away.  From there, users are free to explore
the various settings and functionalities available to them, and
invest in learning how to use them as they see fit.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Complexity is not imposed [&amp;#x2026;]. Org is a toolbox. Many users actually
run only a (very personal) fraction of Org's capabilities, and know
that there more whenever they need it.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;The Org Mode 9 Reference Manual&lt;/i&gt;, Carsten Dominik
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Org Mode can be used for a wide range of purposes, and no two Org
users use it in the same way.  This text focuses on using Org to
manage lists of tasks and projects, from capturing ideas early on - all
the way archiving completed projects.  I hope it can serve as a guide
and inspiration for newcomers to Org, to either replicate a similar
workflow or mould a system of their own.  Lastly, I want to stress that
only a small subset of Org's functionalities are described in this
post.  This should come as good news though, as it means there's
always more to explore and be surprised by.
&lt;/p&gt;

&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org1bd2fe7"&gt;1. Organise text&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org6d679d6"&gt;1.1. Further reading in the Org Mode manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8973e73"&gt;2. Organise tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3af611d"&gt;3. Using TODO states, tags and properties in practice&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgf68b772"&gt;3.1. Describing tasks and projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga6f101f"&gt;3.2. &lt;code&gt;TODO&lt;/code&gt; states, tags and the &lt;code&gt;CATEGORY&lt;/code&gt; property&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6c9e682"&gt;4. Compiling lists of tasks and projects&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5a1b664"&gt;4.1. Listing all &lt;code&gt;TODO&lt;/code&gt; tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9465820"&gt;4.2. Complex agenda views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2bc35a9"&gt;4.3. Custom agenda views&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org985259b"&gt;5. Deadlines and appointments: displaying time-specific information in the agenda&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga4bb4ab"&gt;5.1. Timestamps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgee2490d"&gt;5.2. Displaying tasks in the Org Agenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1202ea2"&gt;5.3. Combining lists of tasks and agendas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3ae270e"&gt;6. Capturing tasks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org1c1df0b"&gt;6.1. Writing directly in the Org file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga219985"&gt;6.2. Using &lt;code&gt;org-capture&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org40dc02d"&gt;6.3. Processing captured tasks with org-refile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org06c07bc"&gt;7. Archiving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdecf724"&gt;8. Further topics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1bd2fe7" class="outline-2"&gt;
&lt;h2 id="org1bd2fe7"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Organise text&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
At the core of Org is a simple markup language, similar to markdown
or reStructuredText. The content of an Org document can be structured
using headlines, lists and tables. Text itself can be &lt;span class="underline"&gt;underlined&lt;/span&gt;,
&lt;del&gt;stroke trough&lt;/del&gt;, or &lt;i&gt;italicized&lt;/i&gt; or &lt;b&gt;bold&lt;/b&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org" id="org9eadc06"&gt;&lt;span class="org-org-level-1"&gt;* A top level headline&lt;/span&gt;
  Headlines are declared using the &lt;span class="org-org-code"&gt;~*~&lt;/span&gt; character.
  The content of headlines is simply text below it.
&lt;span class="org-org-level-1"&gt;* Another top level headline&lt;/span&gt;
  This section illustrates
  - lists
    + sublists 1
    + sublists 2
  - lower level headlines
  - links
&lt;span class="org-org-level-2"&gt;** And a sublevel headline&lt;/span&gt;
   Some content with a &lt;span class="org-org-link"&gt;&lt;a href="https://tlestang.github.io"&gt;link&lt;/a&gt;&lt;/span&gt; to my website.
&lt;span class="org-org-level-3"&gt;*** A subheader with a table&lt;/span&gt;
    Org comes with a full-blown plain text table editor,
    that also brings surprisingly powerful spreadsheet functionalities.

    &lt;span class="org-org-table"&gt;|   a |   b |   c |&lt;/span&gt;
    &lt;span class="org-org-table"&gt;| 1.0 | 2.0 | 3.0 |&lt;/span&gt;

&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
When writing notes, an essay, or even a scientific paper&lt;sup&gt;&lt;a id="fnr.1" class="footref" href="#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;, there isn't
much more you need. In addition, Org makes it straightforward to
&lt;i&gt;export&lt;/i&gt; the plain text Org document to a richer format, such as PDF
(through LaTeX), ODT (to be used with LibreOffice or MS Word for
instance), or HTML.  This post is actually written using Org, and you
are reading the exported HTML version of the underlying Org file.
&lt;/p&gt;

&lt;p&gt;
It's worth noting than Org documents are just &lt;b&gt;plain text&lt;/b&gt;, and
therefore could be written using any text editor&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;.  However,
editing Org files is most convenient within GNU Emacs, since
Org-mode automatically renders Org syntax (e.g. it will display
headlines in a different colour, often with an increased font
size). Org-mode also provides a wealth of functionalities to
efficiently manipulate Org documents, such as reorder and sort
headlines and lists, insert new headlines, links and tables. More
importantly, Org makes it very efficient to navigate the document,
for instance by jumping to the next headline of any level (&lt;code&gt;C-c n&lt;/code&gt;)
or jumping to the parent headline (&lt;code&gt;C-c u&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6d679d6" class="outline-3"&gt;
&lt;h3 id="org6d679d6"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; Further reading in the Org Mode manual&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/manual/Document-Structure.html#Document-Structure"&gt;Document Structure&lt;/a&gt;, in particular &lt;a href="https://orgmode.org/manual/Headlines.html#Headlines"&gt;Headlines&lt;/a&gt;, &lt;a href="https://orgmode.org/manual/Structure-Editing.html#Structure-Editing"&gt;Structure editing&lt;/a&gt;,
&lt;a href="https://orgmode.org/manual/Plain-Lists.html#Plain-Lists"&gt;Plain lists&lt;/a&gt; and &lt;a href="https://orgmode.org/manual/Motion.html#Motion"&gt;Motion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/manual/Markup-for-Rich-Contents.html#Markup-for-Rich-Contents"&gt;Markup for Rich Contents&lt;/a&gt;, in particular &lt;a href="https://orgmode.org/manual/Paragraphs.html#Paragraphs"&gt;Paragraphs&lt;/a&gt; and &lt;a href="https://orgmode.org/manual/Emphasis-and-Monospace.html#Emphasis-and-Monospace"&gt;Emphasis and Monospace&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8973e73" class="outline-2"&gt;
&lt;h2 id="org8973e73"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Organise tasks&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
In Org, it is common for headlines to represent tasks. Beyond its
title, a headline can be further described using either, or a combination of:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A TODO state (typically something like "TODO" or "DONE")&lt;/li&gt;
&lt;li&gt;A collection of one or more tags (each represented as a character
string, like "home" or "office").&lt;/li&gt;
&lt;li&gt;A collection of one or more properties (each represented by a
key-value pair, like &lt;code&gt;Date: 2003&lt;/code&gt; or &lt;code&gt;City: Oxford&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org" id="org1a88ebd"&gt;&lt;span class="org-org-level-2"&gt;** &lt;/span&gt;&lt;span class="org-org-done"&gt;DONE&lt;/span&gt;&lt;span class="org-org-level-2"&gt; Introduce TODO states, tags and categories      &lt;/span&gt;&lt;span class="org-org-level-2"&gt;&lt;span class="org-org-tag"&gt;:emacs:writing:&lt;/span&gt;&lt;/span&gt;
&lt;span class="org-org-drawer"&gt;   :PROPERTIES:&lt;/span&gt;
   &lt;span class="org-org-special-keyword"&gt;:CATEGORY:&lt;/span&gt; &lt;span class="org-org-property-value"&gt;blog&lt;/span&gt;
   &lt;span class="org-org-special-keyword"&gt;:myprop:&lt;/span&gt;   &lt;span class="org-org-property-value"&gt;myvalue&lt;/span&gt;
&lt;span class="org-org-drawer"&gt;   :END:&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The above defines a new headline with a TODO state &lt;code&gt;TODO&lt;/code&gt;. By default,
tasks can take two states: &lt;code&gt;TODO&lt;/code&gt; or &lt;code&gt;DONE&lt;/code&gt;.  Users are free to redefine the
variable &lt;code&gt;org-todo-keywords&lt;/code&gt; to introduce more states:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-todo-keywords
           '((sequence &lt;span class="org-string"&gt;"TODO"&lt;/span&gt; &lt;span class="org-string"&gt;"STARTED"&lt;/span&gt; &lt;span class="org-string"&gt;"WAITING"&lt;/span&gt; &lt;span class="org-string"&gt;"|"&lt;/span&gt; &lt;span class="org-string"&gt;"DONE"&lt;/span&gt; &lt;span class="org-string"&gt;"CANCELLED"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
TODO states are most conveniently set using &lt;code&gt;C-c t&lt;/code&gt; (&lt;code&gt;org-todo&lt;/code&gt;). It
is also possible to cycle through the different states in order in the
order their appear in the sequence, using &lt;code&gt;S-RIGHT&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
In addition to the state of a task, headlines can be described by a
collection of tags.  In the above example, the task &lt;i&gt;introduce TODO
states, tags and categories&lt;/i&gt; is attached two tags: &lt;code&gt;emacs&lt;/code&gt; and
&lt;code&gt;writing&lt;/code&gt;. By default, using &lt;code&gt;C-c q&lt;/code&gt; (&lt;code&gt;org-set-tags-command&lt;/code&gt;) will let
you input anything as a tag. Choose whatever you think best describes
the task according to your organisational system. Note that Org will
offer completion based on the tags already defined throughout the
document.
&lt;/p&gt;

&lt;p&gt;
A list of allowed tags can be defined, either as a file property
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-meta-line"&gt;#+TAGS: meeting(m) talk(t) seminar&lt;/span&gt;
This syntax defines a property &lt;span class="org-org-code"&gt;~TAGS~&lt;/span&gt; for the whole document. It controls the
options offered by &lt;span class="org-org-code"&gt;~org-set-tags-command~&lt;/span&gt;.
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
or by defining the variable &lt;code&gt;org-tags-alist&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-tag-alist '((&lt;span class="org-string"&gt;"meeting"&lt;/span&gt; . ?m) (&lt;span class="org-string"&gt;"talk"&lt;/span&gt; . ?t) (&lt;span class="org-string"&gt;"seminar"&lt;/span&gt; . ?s)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Either way, it is possible to define a shortcut for tags (&lt;i&gt;e.g&lt;/i&gt; &lt;code&gt;m&lt;/code&gt; for &lt;code&gt;meeting&lt;/code&gt;).
This is optional.
&lt;/p&gt;

&lt;p&gt;
Lastly, the example task &lt;i&gt;introduce TODO states, tags and categories&lt;/i&gt;
has the property &lt;code&gt;CATEGORY&lt;/code&gt; set to &lt;code&gt;blog&lt;/code&gt;. Headlines can be associated
properties &lt;code&gt;:KEY: value&lt;/code&gt; inside a &lt;code&gt;:PROPERTIES:&lt;/code&gt;
drawer. Both &lt;code&gt;KEY&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; can be set using &lt;code&gt;C-x p&lt;/code&gt;
(&lt;code&gt;org-set-property&lt;/code&gt;) to any string you want. However, there are some
special properties, and &lt;code&gt;CATEGORY&lt;/code&gt; is one of them.  We'll talk about
it in more details later in this post.  A list of special properties
can be found at &lt;a href="https://orgmode.org/manual/Special-Properties.html"&gt;https://orgmode.org/manual/Special-Properties.html&lt;/a&gt;.
Properties are a supplementary way of describing a headline, in a way
complementary to tags.
&lt;/p&gt;

&lt;p&gt;
Adding such "metadata" to headlines enables their organisation and
tracking. For instance, it is common to keep track of lists of tasks,
&lt;i&gt;e.g.&lt;/i&gt; organising them by tags and/or properties or displaying them on
an agenda.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3af611d" class="outline-2"&gt;
&lt;h2 id="org3af611d"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Using TODO states, tags and properties in practice&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
This section describes my personal use of TODO states, tags and properties.
This provide a simple example illustrating how Org can be tailored to a specific workflow.
&lt;/p&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgf68b772"&gt;3.1. Describing tasks and projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga6f101f"&gt;3.2. &lt;code&gt;TODO&lt;/code&gt; states, tags and the &lt;code&gt;CATEGORY&lt;/code&gt; property&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org66007d3"&gt;3.2.1. &lt;code&gt;TODO&lt;/code&gt; states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbf286dd"&gt;3.2.2. Tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8cee11d"&gt;3.2.3. Properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf68b772" class="outline-3"&gt;
&lt;h3 id="orgf68b772"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Describing tasks and projects&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
Separating &lt;i&gt;tasks&lt;/i&gt; from &lt;i&gt;projects&lt;/i&gt; is inspired by the &lt;a href="https://hamberg.no/gtd/"&gt;Getting Things
Done (GTD) methodology&lt;/a&gt;, introduced by David Allen. A &lt;i&gt;task&lt;/i&gt; can be
expressed as a single action like &lt;i&gt;send latest draft to John&lt;/i&gt;. In
this case, the path to completion is clear: opening my email client,
attaching the latest draft and hitting send. A &lt;i&gt;project&lt;/i&gt; is
something larger, that must be decomposed into a series of
subsequent or parallel tasks, like &lt;i&gt;Update paper following Jane's
feedback&lt;/i&gt;. In this case, the path to completion isn't that clear,
and writing something like &lt;code&gt;* TODO Update paper following Jane's
  feedback&lt;/code&gt; isn't going to lead to anything except
procrastination. Instead, it is good practice to identify the next
tangible action that would move the project forward, something like
&lt;i&gt;Summarise Jane's feedback on first draft&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
In Org terms, I define a task as any headline with an active todo
state, whereas any top level headline without a todo state must be a
project, containing tasks as second-level entries with a todo state.
Top level headlines with an active todo state are standalone tasks.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* A project&lt;/span&gt;
&lt;span class="org-org-level-2"&gt;** &lt;/span&gt;&lt;span class="org-org-todo"&gt;TODO&lt;/span&gt;&lt;span class="org-org-level-2"&gt; The next action that would move the project forward&lt;/span&gt;

&lt;span class="org-org-level-1"&gt;* &lt;/span&gt;&lt;span class="org-org-todo"&gt;TODO&lt;/span&gt;&lt;span class="org-org-level-1"&gt; A standalone task&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga6f101f" class="outline-3"&gt;
&lt;h3 id="orga6f101f"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; &lt;code&gt;TODO&lt;/code&gt; states, tags and the &lt;code&gt;CATEGORY&lt;/code&gt; property&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org66007d3" class="outline-4"&gt;
&lt;h4 id="org66007d3"&gt;&lt;span class="section-number-4"&gt;3.2.1&lt;/span&gt; &lt;code&gt;TODO&lt;/code&gt; states&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-2-1"&gt;
&lt;p&gt;
The states &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;DONE&lt;/code&gt; available by default are not very
descriptive.  Let's introduce three new states:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;STARTED&lt;/code&gt;: Describes a task that was started, but not completed yet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WAITING&lt;/code&gt;: Describes a task that was deferred to someone else,
&lt;i&gt;e.g&lt;/i&gt; &lt;code&gt;* WAITING Jane to share her changes with me&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CANCELLED&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-todo-keywords
        '((sequence &lt;span class="org-string"&gt;"TODO(t)"&lt;/span&gt; &lt;span class="org-string"&gt;"STARTED(s!)"&lt;/span&gt; &lt;span class="org-string"&gt;"WAITING(w!)"&lt;/span&gt; &lt;span class="org-string"&gt;"|"&lt;/span&gt; &lt;span class="org-string"&gt;"DONE(d!)"&lt;/span&gt; &lt;span class="org-string"&gt;"CANCELLED(c!)"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
The exclamation mark following the shortcut letter tells Org to
record to change to the new state. Here is an example:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-2"&gt;** WAITING Draft PR on enabling pickling of &lt;/span&gt;&lt;span class="org-org-level-2"&gt;&lt;span class="org-org-code"&gt;~EvaluatorPython~&lt;/span&gt;&lt;/span&gt;&lt;span class="org-org-level-2"&gt; objects &lt;/span&gt;&lt;span class="org-org-level-2"&gt;&lt;span class="org-org-tag"&gt;:issue_1283_pickle_python_format:&lt;/span&gt;&lt;/span&gt;
   - State "WAITING"    from "DONE"       &lt;span class="org-org-date"&gt;[2021-01-07 Thu 15:26]&lt;/span&gt;
   - State "DONE"       from "TODO"       &lt;span class="org-org-date"&gt;[2021-01-07 Thu 15:26]&lt;/span&gt;
- State "DONE"       from "TODO"              &lt;span class="org-org-date"&gt;[2021-01-05 Tue 10:39]&lt;/span&gt; \\
  &lt;span class="org-org-link"&gt;&lt;a href="https://github.com/pybamm-team/PyBaMM/pull/1298"&gt;https://github.com/pybamm-team/PyBaMM/pull/1298&lt;/a&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
The line &lt;code&gt;- State "DONE" from "TODO" [2021-01-05 Tue 10:39] \\&lt;/code&gt; was
automatically added by Org as I set the task's state to &lt;code&gt;DONE&lt;/code&gt;.
Logging state changes is a very important part of my system, both
for keeping track of when I completed/started a task/project (or
since when I have been waiting for something), but also for generating
a bird's eye view of what I did in a day, using the Org agenda as
described further down.
&lt;/p&gt;

&lt;p&gt;
Whenever setting a new state, it is possible to attach a note with
the change.  In the above example I used this functionality to add
a link to the actual product of the task (a Pull Request on
GitHub). To do this, use &lt;code&gt;org-todo&lt;/code&gt; with a prefix argument (&lt;i&gt;i.e.&lt;/i&gt;
&lt;code&gt;C-u C-c t&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbf286dd" class="outline-4"&gt;
&lt;h4 id="orgbf286dd"&gt;&lt;span class="section-number-4"&gt;3.2.2&lt;/span&gt; Tags&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-2-2"&gt;
&lt;p&gt;
I use tags for attaching contexts to tasks. An example is
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* NEXT Clean road bike                               &lt;/span&gt;&lt;span class="org-org-level-1"&gt;&lt;span class="org-org-tag"&gt;:chore:home:goodweather:&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Whenever I think about cleaning my bike, I can also think of
several things I could do instead. So it's a &lt;code&gt;chore&lt;/code&gt;. It's also
something that I can only do when I'm at home, so it's attached
the &lt;code&gt;home&lt;/code&gt; tag. Lastly, I don't have a space to clean my bike
inside, so it's better to do this when it's good weather.
&lt;/p&gt;

&lt;p&gt;
Attaching contexts to tasks is useful for two reasons. First, it
helps answering the question &lt;i&gt;What do I do know&lt;/i&gt;? If I have the
time and mood for a chore, am home and weather isn't too bad
outside, I know that cleaning my bike would make good use of this
time.  Tags also add supplementary information to a headline, and
this can prove helpful to find a specific task or project
later. Actually we'll see in a minute that tags can be &lt;i&gt;searched&lt;/i&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8cee11d" class="outline-4"&gt;
&lt;h4 id="org8cee11d"&gt;&lt;span class="section-number-4"&gt;3.2.3&lt;/span&gt; Properties&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-2-3"&gt;
&lt;p&gt;
Properties serve a role similar to tags, but are key-value pairs
instead of a single value. This difference is illustrated in the
Org manual as follows:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
First, properties are like tags, but with a value. Imagine
maintaining a file where you document bugs and plan releases for a
piece of software. Instead of using tags like &lt;code&gt;release_1&lt;/code&gt;,
&lt;code&gt;release_2&lt;/code&gt;, you can use a property, say &lt;code&gt;Release&lt;/code&gt;, that in
different sub-trees has different values, such as &lt;code&gt;1.0&lt;/code&gt; or &lt;code&gt;2.0&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
The Org Mode 9.4 Reference Manual, Chapter 7 &lt;i&gt;Properties and Columns&lt;/i&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The manual further describes how properties are useful to attach
information to headlines in a way that almost turn Org documents
into a database. In section &lt;a href="#org6c9e682"&gt;4&lt;/a&gt;, I'll describe how properties can be used to look up
tasks and projects in this database.  Properties keys and values
are arbitrary, and users are free to define the properties they
like. Lastly, it's useful to know that Org comes with a handful of
&lt;i&gt;special properties&lt;/i&gt; with a well-defined meaning.  You can find
the a list a special properties in section 7.2 of the Org 9.4
Reference Manual: &lt;a href="https://orgmode.org/org.html#Special-Properties"&gt;Special Properties&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Surprisingly, I don't make extensive use of Org properties in my
current workflow. One property I &lt;i&gt;do&lt;/i&gt; use a lot is the special
property &lt;code&gt;CATEGORY&lt;/code&gt;.  By default, the value of &lt;code&gt;CATEGORY&lt;/code&gt; for
headlines in a Org file is name of this file.  This comes in handy
when compiling lists of tasks across a pool of org files, as
described in the next section.  More generally, I interpret the
value of &lt;code&gt;CATEGORY&lt;/code&gt; as a specific &lt;i&gt;areas of focus&lt;/i&gt;, another
concept borrowed from David Allen's GTD approach.  As a Research
Software Engineer, my days are spread across several research
software projects, but also training courses I develop and
deliver. There's also several academic communities and networks
I'm involved in, such as the &lt;a href="https://github.com/OxfordCodeReviewNet/forum"&gt;Oxford Code Review Network&lt;/a&gt; or
&lt;a href="https://ox.ukrn.org/"&gt;Reproducible Research Oxford&lt;/a&gt;. Not to forget the non-professional
activities, like sport and hobbies. Personal admin and less
glamorous tasks (like shopping tasks) are there too.  These areas
of focus tend to have little overlap, and are therefore well
described by the &lt;code&gt;CATEGORY&lt;/code&gt; property.  Note the difference with
tags: a task can have multiple tags, but only one category.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6c9e682" class="outline-2"&gt;
&lt;h2 id="org6c9e682"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Compiling lists of tasks and projects&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
So far we've learned how to attach useful information to headlines,
&lt;i&gt;e.g&lt;/i&gt; by setting their state, describing their context or their
area.  If you're like me though, tasks are generated faster than you
complete them, which leads to an ever growing number of tasks and
projects.  Even with all of them described with the right TODO
state, collection of tags and &lt;code&gt;CATEGORY&lt;/code&gt; property, the simple view
of this long list of things to do can be daunting, confusing, and
actually counter productive.
&lt;/p&gt;

&lt;p&gt;
The challenge is clearly stated in David Allen's &lt;i&gt;Getting Things Done&lt;/i&gt;:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
[&amp;#x2026;] the ultimate point and challenge of all this personal
collecting, processing, organising and reviewing methodology: It's
9:22 A.M, Wednesday morning &amp;#x2013; what do you do?
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Getting Things Done&lt;/i&gt;, David Allen
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
To answer this question, we are going to use Org's functionalities to
compile lists and agenda views of tasks, organised according to TODO
states, tags, and properties.
&lt;/p&gt;

&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org5a1b664"&gt;4.1. Listing all &lt;code&gt;TODO&lt;/code&gt; tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9465820"&gt;4.2. Complex agenda views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org2bc35a9"&gt;4.3. Custom agenda views&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgd807d1a"&gt;4.3.1. Example 1: PyBaMM development work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd09949f"&gt;4.3.2. Example 2: Compiling a list of active projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5a1b664" class="outline-3"&gt;
&lt;h3 id="org5a1b664"&gt;&lt;span class="section-number-3"&gt;4.1&lt;/span&gt; Listing all &lt;code&gt;TODO&lt;/code&gt; tasks&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;p&gt;
Let's consider the content of an example Org file named &lt;code&gt;todo.org&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* &lt;/span&gt;&lt;span class="org-org-todo"&gt;TODO&lt;/span&gt;&lt;span class="org-org-level-1"&gt; Update conda package for scikit-fem                     &lt;/span&gt;&lt;span class="org-org-level-1"&gt;&lt;span class="org-org-tag"&gt;:conda:github:&lt;/span&gt;&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* Implement parallel parameter sweeping          &lt;/span&gt;&lt;span class="org-org-level-1"&gt;&lt;span class="org-org-tag"&gt;:python:dev:multiprocessing:&lt;/span&gt;&lt;/span&gt;
&lt;span class="org-org-drawer"&gt;  :PROPERTIES:&lt;/span&gt;
  &lt;span class="org-org-special-keyword"&gt;:CATEGORY:&lt;/span&gt; &lt;span class="org-org-property-value"&gt;pybamm&lt;/span&gt;
&lt;span class="org-org-drawer"&gt;  :END:&lt;/span&gt;
&lt;span class="org-org-level-2"&gt;** &lt;/span&gt;&lt;span class="org-org-done"&gt;DONE&lt;/span&gt;&lt;span class="org-org-level-2"&gt; Get familiar with the &lt;/span&gt;&lt;span class="org-org-level-2"&gt;&lt;span class="org-org-code"&gt;~multiprocessing~&lt;/span&gt;&lt;/span&gt;&lt;span class="org-org-level-2"&gt; module&lt;/span&gt;
&lt;span class="org-org-level-2"&gt;** &lt;/span&gt;&lt;span class="org-org-done"&gt;DONE&lt;/span&gt;&lt;span class="org-org-level-2"&gt; Draft PR on enabling pickling of &lt;/span&gt;&lt;span class="org-org-level-2"&gt;&lt;span class="org-org-code"&gt;~EvaluatorPython~&lt;/span&gt;&lt;/span&gt;&lt;span class="org-org-level-2"&gt; objects &lt;/span&gt;&lt;span class="org-org-level-2"&gt;&lt;span class="org-org-tag"&gt;:issue_1283_pickle_python_format:&lt;/span&gt;&lt;/span&gt;
   - State "DONE"       from "TODO"              &lt;span class="org-org-date"&gt;[2021-01-05 Tue 10:39]&lt;/span&gt; \\
     &lt;span class="org-org-link"&gt;&lt;a href="https://github.com/pybamm-team/PyBaMM/pull/1298"&gt;https://github.com/pybamm-team/PyBaMM/pull/1298&lt;/a&gt;&lt;/span&gt;
&lt;span class="org-org-level-2"&gt;** &lt;/span&gt;&lt;span class="org-org-todo"&gt;TODO&lt;/span&gt;&lt;span class="org-org-level-2"&gt; Understand why call to &lt;/span&gt;&lt;span class="org-org-level-2"&gt;&lt;span class="org-org-code"&gt;~__setstate_~&lt;/span&gt;&lt;/span&gt;&lt;span class="org-org-level-2"&gt; isn't covered by tests &lt;/span&gt;&lt;span class="org-org-level-2"&gt;&lt;span class="org-org-tag"&gt;:issue_1283_pickle_python_format:&lt;/span&gt;&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* STARTED Draft outline of presentation for FOSDEM2021&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* Prepare short presentation on Org-mode for MxResearch  &lt;/span&gt;&lt;span class="org-org-level-1"&gt;&lt;span class="org-org-tag"&gt;:MxResearch:orgmode:&lt;/span&gt;&lt;/span&gt;
  &lt;span class="org-org-special-keyword"&gt;DEADLINE:&lt;/span&gt; &lt;span class="org-org-date"&gt;&amp;lt;2021-01-14 Thu 14:30&amp;gt;&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* CAL Presentation on org-mode for productivity  &lt;/span&gt;&lt;span class="org-org-level-1"&gt;&lt;span class="org-org-tag"&gt;:present:orgmode:MxResearch:&lt;/span&gt;&lt;/span&gt;
  &lt;span class="org-org-date"&gt;&amp;lt;2021-01-07 Thu 15:00&amp;gt;&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* CAL Meeting with Jane Doe&lt;/span&gt;
  &lt;span class="org-org-date"&gt;&amp;lt;2021-01-15 Fri 09:00&amp;gt;&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* CAL OxfordRSE coffee catchup&lt;/span&gt;
  &lt;span class="org-org-date"&gt;&amp;lt;2021-01-05 Tue 11:00 +1w&amp;gt;&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* CAL PyBaMM dev meeting&lt;/span&gt;
  &lt;span class="org-org-date"&gt;&amp;lt;2021-01-04 Mon 13:30-14:30&amp;gt;&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* &lt;/span&gt;&lt;span class="org-org-todo"&gt;TODO&lt;/span&gt;&lt;span class="org-org-level-1"&gt; Describe packaging of &lt;/span&gt;&lt;span class="org-org-level-1"&gt;&lt;span class="org-org-code"&gt;~idaklu~&lt;/span&gt;&lt;/span&gt;&lt;span class="org-org-level-1"&gt; C extension in issue &lt;/span&gt;&lt;span class="org-org-link"&gt;&lt;a href="https://github.com/pybamm-team/PyBaMM/issues/1296"&gt;#1296&lt;/a&gt;&lt;/span&gt;&lt;span class="org-org-level-1"&gt;     &lt;/span&gt;&lt;span class="org-org-level-1"&gt;&lt;span class="org-org-tag"&gt;:github:&lt;/span&gt;&lt;/span&gt;
&lt;span class="org-org-drawer"&gt;  :PROPERTIES:&lt;/span&gt;
  &lt;span class="org-org-special-keyword"&gt;:CATEGORY:&lt;/span&gt; &lt;span class="org-org-property-value"&gt;pybamm&lt;/span&gt;
&lt;span class="org-org-drawer"&gt;  :END:&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Our starting point for building lists of tasks is the &lt;i&gt;agenda
dispatcher&lt;/i&gt;, which we invoke with &lt;code&gt;M-x org-agenda&lt;/code&gt;.  For
convenience, this is usually bound to &lt;code&gt;C-c a&lt;/code&gt;, but it's not by
default:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(global-set-key &lt;span class="org-string"&gt;"\C-ca"&lt;/span&gt; 'org-agenda)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Commands available from the agenda dispatcher, known as &lt;i&gt;agenda
commands&lt;/i&gt;, do not operate on the buffer visited at the time the
dispatcher was called.  Instead, they operate on a list of Org
files defined by the variable &lt;code&gt;org-agenda-files&lt;/code&gt;. Let's set it to
contain our file &lt;code&gt;todo.org&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-agenda-files '(&lt;span class="org-string"&gt;"~/org/todo.org"&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
With this set, pressing &lt;code&gt;C-c a t&lt;/code&gt; will display all headlines in
&lt;code&gt;todo.org&lt;/code&gt; which TODO state is &lt;code&gt;TODO&lt;/code&gt;, in a separate buffer.  This
new buffer is in Org-Agenda mode, a major mode that is specific to
these lists, also known as &lt;i&gt;agenda views&lt;/i&gt;.  In Org-Agenda mode,
each headline is displayed in a table, the first column being the
category, the second column the TODO state, and the third column
the title with tags.  It is possible to act on a headline just as
in the original Org buffer: change TODO state, set tags and
properties&amp;#x2026;  With point on a headline, hitting &lt;code&gt;RET&lt;/code&gt; will switch
to the corresponding org buffer (at the location of the headline)
in the current window. Similar behaviour is available by hitting
&lt;code&gt;TAB&lt;/code&gt;, but this time the Org buffer is opened in another window.
&lt;/p&gt;

&lt;p&gt;
With &lt;code&gt;C-c a t&lt;/code&gt;, you instantly get a bird's eye view of all the
&lt;code&gt;TODO&lt;/code&gt; tasks, that is much easy on the brain than painfully looking
through all the entries in your Org files.
The agenda dispatcher offers several other agenda commands.  With
&lt;code&gt;C-c a T&lt;/code&gt;, it is possible to compile a list of headlines with a
specific TODO state.  For instance, hitting &lt;code&gt;C-c a T CAL RET&lt;/code&gt; would
display an Org-Agenda buffer with a list of all upcoming events.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9465820" class="outline-3"&gt;
&lt;h3 id="org9465820"&gt;&lt;span class="section-number-3"&gt;4.2&lt;/span&gt; Complex agenda views&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;p&gt;
There's a reason we described our tasks with tags and properties:
Org makes it straightforward to build agenda views based on a
specific combination of TODO state, tags and properties (and
more!).
&lt;/p&gt;

&lt;p&gt;
Let's pretend it's 13:00, my post-lunch coffee is just brewed and
I've got an afternoon free of meetings ahead of me.  Now would be a
good time to start or continue a substantial programming task.  At
the time of writing, my main project is &lt;a href="https://www.pybamm.org/"&gt;PyBaMM&lt;/a&gt;, a Python package to
simulate and study mathematical models of batteries.
&lt;/p&gt;

&lt;p&gt;
Let's build a list of candidate tasks. Let's invoke the agenda
dispatcher once again with &lt;code&gt;C-c a&lt;/code&gt; (&lt;code&gt;org-agenda&lt;/code&gt;). Pressing &lt;code&gt;m&lt;/code&gt;, we
can compile a list of tasks that match a given set combination of
TODO state, tags and property.  In this case, we want to match
tasks which &lt;code&gt;CATEGORY&lt;/code&gt; value is &lt;code&gt;pybamm&lt;/code&gt; and TODO state &lt;code&gt;TODO&lt;/code&gt; or
&lt;code&gt;STARTED&lt;/code&gt;.  Programming tasks are attached the &lt;code&gt;dev&lt;/code&gt; tag.  The
string for such a match is therefore:
&lt;/p&gt;
&lt;pre class="example"&gt;
dev+CATEGORY="pybamm"/TODO|STARTED
&lt;/pre&gt;
&lt;p&gt;
Where &lt;code&gt;/&lt;/code&gt; separates the tag/property query from the TODO state query.
&lt;code&gt;NEXT|STARTED&lt;/code&gt; matches either states &lt;code&gt;TODO&lt;/code&gt; or &lt;code&gt;STARTED&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Because our example Org file is relatively small, there's only one
task that matches:
&lt;/p&gt;
&lt;pre class="example"&gt;
Headlines with TAGS match: dev+CATEGORY="pybamm"/STARTED|TODO
Press â€˜C-u râ€™ to search again
pybamm:     TODO Understand why call to ~__setstate_~ isn't covered by tests :issue_1283_pickle_python_format:dev:
&lt;/pre&gt;
&lt;p&gt;
The syntax for matching headlines isn't very
complicated. Oftentimes however, there may be several ways of
writing complex queries, similarly to writing regular
expressions. Speaking of which, you can also use when matching
headlines.  I won't go into more details about the match syntax
here, because it is well described in the Org Reference Manual, see
&lt;a href="https://orgmode.org/manual/Matching-tags-and-properties.html"&gt;Matching tags and properties&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2bc35a9" class="outline-3"&gt;
&lt;h3 id="org2bc35a9"&gt;&lt;span class="section-number-3"&gt;4.3&lt;/span&gt; Custom agenda views&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-3"&gt;
&lt;p&gt;
The ability to narrow down the content of your Org files to a list
of tasks matching well defined criteria is of incredible value when
it comes to keeping on top of your workload.  However, some
situations occur more than others, for instance starting or
continuing development work on a specific project, and we don't
want to continuously (re)write the same &amp;#x2013; potentially complex &amp;#x2013;
agenda queries.
&lt;/p&gt;

&lt;p&gt;
To avoid this, Org makes it possible to define custom agenda
commands, which will be available from the agenda dispatcher, next
to "list all TODO entries" and others.  With this command
defined once and for all, we'll then be one keystroke away from
running the corresponding agenda query, just like we would do with
&lt;code&gt;C-c a t&lt;/code&gt; (&lt;code&gt;org-todo-list&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
To define new agenda commands, we customise the variable
&lt;code&gt;org-agenda-custom-commands&lt;/code&gt;. There's a lot of freedom in defining
custom agenda commands, but sadly with great flexibility often
comes complexity. So let's illustrate the concept with a couple of
simple examples from my own configuration.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd807d1a" class="outline-4"&gt;
&lt;h4 id="orgd807d1a"&gt;&lt;span class="section-number-4"&gt;4.3.1&lt;/span&gt; Example 1: PyBaMM development work&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-4-3-1"&gt;
&lt;p&gt;
I didn't choose the previous example, programming for PyBaMM, for
no reason.  This is actually my main activity at the moment and,
several times a day, I must lookup corresponding tasks.  Instead
of having to use &lt;code&gt;C-a m&lt;/code&gt; (&lt;code&gt;org-tags-view&lt;/code&gt;) with
&lt;code&gt;dev+CATEGORY="pybamm"/TODO|STARTED&lt;/code&gt; all the time, I want this to
be accessible from a single keystroke, for instance &lt;code&gt;C-c a
    b&lt;/code&gt;. Let's write the corresponding agenda command:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-agenda-custom-commands
      '((&lt;span class="org-string"&gt;"b"&lt;/span&gt;
       &lt;span class="org-string"&gt;"List of all active PyBaMM dev tasks"&lt;/span&gt;
       tags-todo
       &lt;span class="org-string"&gt;"dev+CATEGORY=\"pybamm\"/TODO|STARTED"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The variable &lt;code&gt;org-agenda-custom-commands&lt;/code&gt; is a list, in which each
element describes a command.  Each command is also described as a
list.  The first element is the key for the command (&lt;code&gt;"b"&lt;/code&gt;), the
second element is the description that will be display in the
agenda dispatcher (&lt;code&gt;"List of all active PyBaMM dev tasks"&lt;/code&gt;), the
third element is a special symbol that defines the command type.
In this example, it is set to &lt;code&gt;tags-todo&lt;/code&gt;, which defines a
tags/properties/TODO state match across Org agenda files, but only
for headlines with a defined TODO state.  Lastly, the fourth
element is the match string itself
(&lt;code&gt;"dev+CATEGORY=\"pybamm\"/TODO|STARTED"&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd09949f" class="outline-4"&gt;
&lt;h4 id="orgd09949f"&gt;&lt;span class="section-number-4"&gt;4.3.2&lt;/span&gt; Example 2: Compiling a list of active projects&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-4-3-2"&gt;
&lt;p&gt;
Another useful agenda operations is to generate a bird's eye view
of all active projects.  As a reminder, a project is a goal which
completion involves more than one tasks.  In section &lt;a href="#orgf68b772"&gt;3.1&lt;/a&gt;, we described active projects as any top-level
headline without a TODO state.  Let's add a new command to
&lt;code&gt;org-agenda-custom-commands&lt;/code&gt; to display a list of active projects:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-agenda-custom-commands
      '((&lt;span class="org-string"&gt;"b"&lt;/span&gt;
             &lt;span class="org-string"&gt;"List of all active PyBaMM dev tasks"&lt;/span&gt;
             tags-todo
             &lt;span class="org-string"&gt;"dev+CATEGORY=\"pybamm\"/TODO|STARTED"&lt;/span&gt;)
        (&lt;span class="org-string"&gt;"p"&lt;/span&gt;
         &lt;span class="org-string"&gt;"List of all active projects"&lt;/span&gt;
         tags
         &lt;span class="org-string"&gt;"+LEVEL=1+TODO=\"\""&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Where &lt;code&gt;LEVEL=1&lt;/code&gt; matches top-level headlines, and &lt;code&gt;TODO=""&lt;/code&gt; matches
headlines without a TODO state.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org985259b" class="outline-2"&gt;
&lt;h2 id="org985259b"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Deadlines and appointments: displaying time-specific information in the agenda&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
Sometimes the description of a task must contain information about
time.  For instance appointments or events such as seminars,
workshops or colloquia. There are also tasks or projects that must
be completed by a certain date or which aren't to be
started before a specific date or time.
&lt;/p&gt;

&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orga4bb4ab"&gt;5.1. Timestamps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgdeb8ea0"&gt;5.1.1. Deadlines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org673b585"&gt;5.1.2. Scheduled tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgee2490d"&gt;5.2. Displaying tasks in the Org Agenda&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org3c06a8e"&gt;5.2.1. Viewing progress in the agenda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1202ea2"&gt;5.3. Combining lists of tasks and agendas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga4bb4ab" class="outline-3"&gt;
&lt;h3 id="orga4bb4ab"&gt;&lt;span class="section-number-3"&gt;5.1&lt;/span&gt; Timestamps&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-1"&gt;
&lt;p&gt;
Org comes with a very complete support for defining and manipulating
times and dates, through &lt;i&gt;timestamps&lt;/i&gt;.  To insert a timestamp at point
in the current Org buffer, hit &lt;code&gt;C-c .&lt;/code&gt; (&lt;code&gt;org-time-stamp&lt;/code&gt;).  This
will open the built-in Emacs calendar in which you can navigate
(using shift and the arrow keys) to select the date you want the
timestamp to describe.  In addition to the date, you can also write
a time directly in the mini-buffer.  Org accepts &lt;i&gt;a lot&lt;/i&gt; of formats
for specifying both date and time, and I encourage you to have a
look at the docs for a description of each of them, see &lt;a href="https://orgmode.org/manual/The-date_002ftime-prompt.html#The-date_002ftime-prompt"&gt;8.2.1 The
date/time prompt&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Once you inserted a timestamp, like this &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2021-01-06 Wed&amp;gt;&lt;/span&gt;&lt;/span&gt;, you
might want to modify it.  Since Org is nothing but plain text, you can
always rewrite its content directly.  But if you change the day (for
instance going from &lt;code&gt;Wed&lt;/code&gt; to &lt;code&gt;Tue&lt;/code&gt;), you'd have to remember to
change the date as well (from &lt;code&gt;2021-06-01&lt;/code&gt; to
&lt;code&gt;2021-05-01&lt;/code&gt;). Instead, you can just put point on the day (&lt;code&gt;Wed&lt;/code&gt;)
and hit &lt;code&gt;S-DOWN&lt;/code&gt; to go back one day.  Note how the date is changed
automatically.  Same goes for each part of the day: to go one month
forward in time, just put point on either digits of the month number
(&lt;code&gt;01&lt;/code&gt;) and hit &lt;code&gt;S-UP&lt;/code&gt;.  Note how the day is changed accordingly. You
can verify for yourself, 2021-02-06 is a Saturday.
&lt;/p&gt;


&lt;p&gt;
In the example Org file above, a few tasks have timestamps.  Most of
them are calendar events, with the TODO state &lt;code&gt;CAL&lt;/code&gt;, for instance:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* CAL Weekly coffee catchup&lt;/span&gt;
     &lt;span class="org-org-date"&gt;&amp;lt;2021-01-05 Tue 11:00-12:00 +1w&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
This task has a duration of one hour, indicated by &lt;code&gt;11:00-12:00&lt;/code&gt;.
More importantly, this task is &lt;i&gt;repeated&lt;/i&gt; every week, hence the
&lt;code&gt;+1w&lt;/code&gt;.  On next Tuesday around noon, when this tasks' state will be
switched to &lt;code&gt;DONE&lt;/code&gt;, this change will logged below the headline with
the right timestamp, but the headline will go back to &lt;code&gt;CAL&lt;/code&gt;
instantly, the associated date being pushed by a week. Neat! 
&lt;/p&gt;

&lt;p&gt;
All sorts of repeating tasks can be defined following the same syntax,
&lt;i&gt;e.g&lt;/i&gt; &lt;code&gt;+2d&lt;/code&gt; for every other day, or &lt;code&gt;+6m&lt;/code&gt; for twice a year.  You can
learn more about repeating tasks in section 8.3.2 of the Org
Reference Manual: &lt;a href="https://orgmode.org/manual/Repeated-tasks.html"&gt;8.3.2 Repeated tasks&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdeb8ea0" class="outline-4"&gt;
&lt;h4 id="orgdeb8ea0"&gt;&lt;span class="section-number-4"&gt;5.1.1&lt;/span&gt; Deadlines&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-5-1-1"&gt;
&lt;p&gt;
Sometimes we must remember that a task must be completed by a
specific date and/or time.  An example is
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* Prepare short presentation on Org-mode for MxResearch  &lt;/span&gt;&lt;span class="org-org-level-1"&gt;&lt;span class="org-org-tag"&gt;:mxresearch:orgmode:present:&lt;/span&gt;&lt;/span&gt;
       &lt;span class="org-org-special-keyword"&gt;DEADLINE:&lt;/span&gt; &lt;span class="org-org-date"&gt;&amp;lt;2021-01-07 Thu 14:30&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
The above describes a project that must be completed by
&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2021-01-07 Thu 14:30&amp;gt;&lt;/span&gt;&lt;/span&gt;.  Deadlines can be inserted using &lt;code&gt;C-c C-d&lt;/code&gt;
(&lt;code&gt;org-deadline&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org673b585" class="outline-4"&gt;
&lt;h4 id="org673b585"&gt;&lt;span class="section-number-4"&gt;5.1.2&lt;/span&gt; Scheduled tasks&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-5-1-2"&gt;
&lt;p&gt;
In a similar way to deadlines, Org makes it easy to describe tasks
that shouldn't be started before a specific date. Example:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* NEXT Send Happy New Year cards&lt;/span&gt;
  &lt;span class="org-org-special-keyword"&gt;SCHEDULED:&lt;/span&gt; &lt;span class="org-org-date"&gt;&amp;lt;2021-01-01 Fri&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
It's sometimes confusing for new Org users to differentiate between
setting a &lt;code&gt;SCHEDULED&lt;/code&gt; timestamp to a task and a plain timestamp.
This quote from the Org Mode Reference Manual clarifies the
situation:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;Important&lt;/b&gt;: Scheduling an item in Org mode should not be understood
in the same way that we understand scheduling a meeting. Setting a
date for a meeting is just a simple appointment, you should mark
this entry with a simple plain timestamp, to get this item shown
on the date where it applies. This is a frequent misunderstanding
by Org users. In Org mode, scheduling means setting a date when
you want to start working on an action item.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;The Org Mode 9.4 Reference Manual&lt;/i&gt;, section &lt;i&gt;8.3 Deadlines and Scheduling&lt;/i&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgee2490d" class="outline-3"&gt;
&lt;h3 id="orgee2490d"&gt;&lt;span class="section-number-3"&gt;5.2&lt;/span&gt; Displaying tasks in the Org Agenda&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-2"&gt;
&lt;p&gt;
In section &lt;a href="#org5a1b664"&gt;4.1&lt;/a&gt;, the Org agenda dispatcher
(&lt;code&gt;M-x org-agenda&lt;/code&gt;) was introduced. This dispatcher offers several
agenda commands that read agenda files (defined in the
&lt;code&gt;org-agenda-files&lt;/code&gt; variable) and display some of their content in a
clear manner inside a separate buffer, in Org-Agenda mode.
Examples are &lt;code&gt;org-todo-list&lt;/code&gt; (&lt;code&gt;C-c a t&lt;/code&gt;) to list all headlines
which TODO state is &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;org-tags-view&lt;/code&gt; (&lt;code&gt;C-c a m&lt;/code&gt;) to list
all headlines matching a tags/properties/todo query.
&lt;/p&gt;

&lt;p&gt;
Another fundamental agenda command in Org is &lt;code&gt;org-agenda-list&lt;/code&gt;,
bound to the key &lt;code&gt;a&lt;/code&gt; from the agenda dispatcher.  This displays a
buffer in Org-Agenda mode representing a specific time period, by
default the current week.  This is effectively an agenda, hence the
name Org-Agenda for the corresponding major mode.
&lt;/p&gt;

&lt;p&gt;
As you would expect, any task with an associated timestamp appears
in the Org agenda, at the right time and date. Upcoming deadlines
are announced according to the value of
&lt;code&gt;org-deadlines-warning-days&lt;/code&gt;, clearly marked in the day's agenda
whenever the corresponding task is due.  Scheduled tasks on the day
are also clearly signalled, and reminded of every day until
they are completed.
&lt;/p&gt;

&lt;p&gt;
The display of the Org agenda is customisable, by hitting &lt;code&gt;v&lt;/code&gt; in
the Org-Agenda buffer.  Particularly, it is possible to go from
the default weekly view to a monthly or yearly view.  or day view.
Going forward in time is done hitting &lt;code&gt;f&lt;/code&gt;, backward with &lt;code&gt;b&lt;/code&gt;.  See
&lt;a href="https://orgmode.org/manual/Agenda-Commands.html"&gt;11.5 Commands in the Agenda Buffer&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3c06a8e" class="outline-4"&gt;
&lt;h4 id="org3c06a8e"&gt;&lt;span class="section-number-4"&gt;5.2.1&lt;/span&gt; Viewing progress in the agenda&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-5-2-1"&gt;
&lt;p&gt;
In section &lt;a href="#org66007d3"&gt;3.2.1&lt;/a&gt;, we saw that changing the state of a
task triggers the recording of the date and time at which this
change occurred.  However, notice that in this case the inserted
timestamp is delimited by square brackets instead of &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;.
This is refereed to as an &lt;i&gt;inactive&lt;/i&gt; timestamp, and by default
these will &lt;i&gt;not show up&lt;/i&gt; in the agenda.  To show inactive
timestamps in the agenda, hit &lt;code&gt;v [&lt;/code&gt; in the Org-Agenda buffer.
&lt;/p&gt;

&lt;p&gt;
Showing inactive timestamps in the agenda can make it cluttered
and therefore hard to read.  However, this makes for a good
summary of what happened in a day/week, and when.  In my case,
using the TODO states configuration introduced in &lt;a href="#org66007d3"&gt;3.2.1&lt;/a&gt;,
displaying inactive timestamp is a convenient way of getting a
bird's eye view of
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;When a task was completed (switched to &lt;code&gt;DONE&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;When a task started depending on someone/something else (switched to &lt;code&gt;WAITING&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;When a task was started (switched to &lt;code&gt;STARTED&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;When a task was cancelled (switched to &lt;code&gt;CANCELLED&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
With point on a task, whether in the agenda or in the Org buffer
directly, it's always possible to log a note with an inactive
timestamp below it, using &lt;code&gt;C-c z&lt;/code&gt; (&lt;code&gt;org-add-note&lt;/code&gt;).  I use this
extensively to log my progress on longer tasks, that might span
several days.  Even if a task was &lt;code&gt;STARTED&lt;/code&gt; yesterday, &lt;code&gt;DONE&lt;/code&gt;
tomorrow, logging progress with a quick note guarantees it will show
up in today's agenda when displaying inactive timestamps.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1202ea2" class="outline-3"&gt;
&lt;h3 id="org1202ea2"&gt;&lt;span class="section-number-3"&gt;5.3&lt;/span&gt; Combining lists of tasks and agendas&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-3"&gt;
&lt;p&gt;
So far, we've learned how the Org agenda can be used to either display
lists of tasks matching a specific tags/todo/properties query, or
an agenda displaying timestamped tasks on a timeline.  However,
customising &lt;code&gt;org-agenda-custom-commands&lt;/code&gt;, introduced above in
section &lt;a href="#org2bc35a9"&gt;4.3&lt;/a&gt;, it is possible to define new agenda
views that mix both list(s) of tasks and agenda(s).
&lt;/p&gt;

&lt;p&gt;
Let's pretend its Wednesday morning, and you are sitting at your
desk.  In this context, a simple, yet useful, composite (or
"block") agenda command is a combination of the day's agenda and
the list of urgent tasks:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-agenda-custom-commands
      (&lt;span class="org-string"&gt;"v"&lt;/span&gt; &lt;span class="org-string"&gt;"Custom day agenda"&lt;/span&gt;
           ((agenda &lt;span class="org-string"&gt;""&lt;/span&gt; ((org-agenda-span 1)))
            (tags-todo &lt;span class="org-string"&gt;"+PRIORITY=\"A\""&lt;/span&gt;
                       ((org-agenda-overriding-header &lt;span class="org-string"&gt;"Urgent"&lt;/span&gt;))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Defining composite agenda views is similar to defining custom
single agenda views (see &lt;a href="#org2bc35a9"&gt;4.3&lt;/a&gt; for a reminder),
except that the third element of the list is itself a list of
single agenda views, that makes the composite agenda.  In the above
example, the agenda view is made of both the day's agenda (&lt;code&gt;agenda
   ""&lt;/code&gt;) and a list of tasks matching headlines with the highest
priority (&lt;code&gt;tags-todo "+PRIORITY=\"A\""&lt;/code&gt;).  Both single agenda views
are are further customised by properties &lt;code&gt;org-agenda-span&lt;/code&gt; and
&lt;code&gt;org-agenda-overriding-header&lt;/code&gt;, respectively.  The first one makes
sure only one day is displayed in the agenda.  The second defines a
clear header for the list of urgent tasks.
&lt;/p&gt;

&lt;p&gt;
Custom agenda views, whether they define single or composite views,
offer a broad range of opportunities for quickly displaying information
based on your agenda files, in a way useful to a particular area or
context.  I encourage you to have a look at the the documentation
for &lt;code&gt;org-agenda-custom-commands&lt;/code&gt;, to grasp the extent of
possibilities.  If you are looking for inspiration, there is no
shortage of example configurations available on the web, and a
little searching should give give lots of ideas.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3ae270e" class="outline-2"&gt;
&lt;h2 id="org3ae270e"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Capturing tasks&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
The previous sections discussed the description and processing of
tasks.  But to do that, we need tasks. How do we add tasks?
&lt;/p&gt;

&lt;p&gt;
A straightforward way to add a new task is to open the relevant Org
file, write a new headline and think about a relevant TODO state,
set of tags and &lt;code&gt;CATEGORY&lt;/code&gt; property.  Perhaps surprisingly, that's
not an approach that I would recommend.
&lt;/p&gt;

&lt;p&gt;
Most new tasks and projects originate from sudden ideas or suddenly
remembering something, receiving an email or having a conversation.
Furthermore, tasks almost never come well-defined, with their clear
formulation and relevant context.  What comes to mind is more of a
blurry idea of something you would want or have to do.  This idea
&lt;i&gt;must&lt;/i&gt; be captured, but in a way that is the least disruptive to
your current task, whether it's working through your email inbox or
attending the weekly team meeting.  Particularly, now is &lt;i&gt;not&lt;/i&gt; the
time to think hard about a clear formulation of what must be done,
neither of when, by whom, and in which context.  This can be done
later, when your full attention is available to process this new
task.
&lt;/p&gt;

&lt;p&gt;
Again inspired from David Allen's GTD approach, the addition of new
tasks and project is made of two distinct steps: &lt;i&gt;capturing&lt;/i&gt; and
&lt;i&gt;processing&lt;/i&gt;.  The next two sections are all about the former.
Section &lt;a href="#org40dc02d"&gt;6.3&lt;/a&gt; then focuses on
processing captured tasks.
&lt;/p&gt;

&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org1c1df0b"&gt;6.1. Writing directly in the Org file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orga219985"&gt;6.2. Using &lt;code&gt;org-capture&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge1a82c7"&gt;6.2.1. Writing capture templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org41af7ce"&gt;6.2.2. More examples of custom capture templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org40dc02d"&gt;6.3. Processing captured tasks with org-refile&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org891982f"&gt;6.3.1. &lt;code&gt;org-refile&lt;/code&gt; to move headlines around consistently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgef8e699"&gt;6.3.2. Clearing the inbox with &lt;code&gt;org-refile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1c1df0b" class="outline-3"&gt;
&lt;h3 id="org1c1df0b"&gt;&lt;span class="section-number-3"&gt;6.1&lt;/span&gt; Writing directly in the Org file&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-6-1"&gt;
&lt;p&gt;
New tasks come in the form of blurry ideas, often a couple of
trigger words, without any tags, TODO state or properties.  Adding
it to your Org file(s) straight away is therefore risky, as it is
likely that you will end up forgetting about its existence, the
corresponding headline being progressively buried in the depth of
your todo list.  Particularly as it will not appear in your agenda
buffer with any tags, TODO state or properties.
&lt;/p&gt;

&lt;p&gt;
By adding a tag, say &lt;code&gt;UNPROCESSED&lt;/code&gt;, to a new headline, we can make
sure that at anytime we can list all tasks that are yet not fully
part of the system, and that require processing.  However, I still
wouldn't consider a satisfactory solution.  First of all, it is very
easy to forget to add the &lt;code&gt;UNPROCESSED&lt;/code&gt; tag.  If you do so, you will
likely forget about the task and not noticing it until too
late&amp;#x2026; hello stress!  Second, when editing an Org file, there is
always the risk of messing with its content, potentially altering
the description of other tasks.  You wouldn't want to inadvertently
push the deadline for that grant proposal by a week, would you?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga219985" class="outline-3"&gt;
&lt;h3 id="orga219985"&gt;&lt;span class="section-number-3"&gt;6.2&lt;/span&gt; Using &lt;code&gt;org-capture&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-6-2"&gt;
&lt;p&gt;
Both pitfalls can be avoided by using &lt;code&gt;org-capture&lt;/code&gt;.  This function
lets you add a new headline to an Org file, from any other buffer,
in a well-defined manner.  No risks of altering anything.
&lt;/p&gt;

&lt;p&gt;
For this to be true, let's bind &lt;code&gt;org-capture&lt;/code&gt; to &lt;code&gt;C-c c&lt;/code&gt; in the
global keymap:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(global-set-key &lt;span class="org-string"&gt;"\C-cc"&lt;/span&gt; 'org-capture)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Now, whatever you're doing in Emacs, for instance reading your
emails or writing code, you can always use &lt;code&gt;org-capture&lt;/code&gt; to add a
new headline in a relevant location &amp;#x2013; which remains to be defined.
&lt;/p&gt;

&lt;p&gt;
Calling &lt;code&gt;org-capture&lt;/code&gt; displays a splash buffer, from which a
specific &lt;i&gt;capture template&lt;/i&gt; can be selected.  A capture template
defines the target file as well as under which headline in this
file the captured item should be placed, with what tags, TODO
state, and potentially more.  By default, Org offers only one
capture template, named "Tasks".  Selecting this template displays
a new buffer with a an empty first level headline, ready to be
defined with a title, tags, properties and whatever you want to
attach to it .  Hitting &lt;code&gt;C-c C-c&lt;/code&gt; will write this headline as a
second level headline under the "* Tasks" entry in a file &lt;code&gt;.notes&lt;/code&gt;
in your home directory.  The capture buffer is closed and you can
resume your task at hand.
&lt;/p&gt;

&lt;p&gt;
The behaviour of &lt;code&gt;org-capture&lt;/code&gt; is highly customisable, through
writing custom capture template as shown in the next section.
However, the default behaviour already exposes the tow main
benefits of using &lt;code&gt;org-capture&lt;/code&gt;: disruption is kept at a minimum,
and there is no risk of altering the existing content of the target
file.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge1a82c7" class="outline-4"&gt;
&lt;h4 id="orge1a82c7"&gt;&lt;span class="section-number-4"&gt;6.2.1&lt;/span&gt; Writing capture templates&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-6-2-1"&gt;
&lt;p&gt;
The default capture template may be useful to some, but
&lt;code&gt;org-capture&lt;/code&gt; can only reach its true potential with defining
custom capture templates.  This is done by customising the
variable &lt;code&gt;org-capture-templates&lt;/code&gt;.  Let's consider an example from
my own configuration:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-capture-templates
          '((&lt;span class="org-string"&gt;"t"&lt;/span&gt; &lt;span class="org-string"&gt;"Default capture"&lt;/span&gt; entry (file &lt;span class="org-string"&gt;"~/org/inbox.org"&lt;/span&gt;)
             &lt;span class="org-string"&gt;"* %?\n%u\n%a\n"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
The above defines a capture template "Default capture", bound to
"&lt;code&gt;t&lt;/code&gt;" in the capture dispatcher (it effectively overrides the
default template).  The keyword &lt;code&gt;entry&lt;/code&gt; indicates that the
template is for an Org headline. Other options are &lt;code&gt;item&lt;/code&gt;,
&lt;code&gt;checkitem&lt;/code&gt;, &lt;code&gt;table-line&lt;/code&gt; and &lt;code&gt;plain&lt;/code&gt;, for a list item, a list
item with a checkbox, a new line in a table, or just some text,
respectively. The fourth argument &lt;code&gt;(file org-default-notes-file)&lt;/code&gt;
indicates that the completed template should be made a top-level
headline in the target file &lt;code&gt;~/org/inbox.org~&lt;/code&gt;.  Lastly, the
string &lt;code&gt;"* %?\n%u\n%a\n"&lt;/code&gt; defines the template itself, and
deserves its own paragraph.
&lt;/p&gt;

&lt;p&gt;
A capture template string can be made of any text, but special
characters (referred to as "%-escapes" in the documentation)
enable great flexibility and automation. For instance, the string
~"* %u\n" defines a template beginning with a star character,
followed by a space, followed by an (inactive) timestamp
indicating the capture time, followed by a new line.  So what does
&lt;code&gt;"* %?\n%u\n%a\n"&lt;/code&gt; mean?  The "%-escape" string &lt;code&gt;%a&lt;/code&gt; stands for a
link to the location from which the call to &lt;code&gt;org-capture&lt;/code&gt; was
made, and &lt;code&gt;%?&lt;/code&gt; indicates the position of the cursor in the capture
buffer, both separated by a new line character.
&lt;/p&gt;

&lt;p&gt;
There are more than 25 different escape characters available to
customise the behaviour of your capture templates, and if none fits
your needs, it's always possible to evaluate arbitrary Emacs
Lisp expression when expanding a capture template.
&lt;/p&gt;

&lt;p&gt;
Beyond using %-escapes, capture templates can be further
customised through adding properties to the template definition
list.  For instance
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-capture-templates
          '((&lt;span class="org-string"&gt;"t"&lt;/span&gt; &lt;span class="org-string"&gt;"Default capture"&lt;/span&gt; entry (file &lt;span class="org-string"&gt;"~/org/inbox.org"&lt;/span&gt;)
             &lt;span class="org-string"&gt;"* %?\n%u\n%a\n"&lt;/span&gt; &lt;span class="org-builtin"&gt;:prepend&lt;/span&gt; &lt;span class="org-builtin"&gt;:jump-to-captured&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
will insert the captured headline at the top of the target file
instead of appending to it, and jump to target file after closing
the capture buffer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org41af7ce" class="outline-4"&gt;
&lt;h4 id="org41af7ce"&gt;&lt;span class="section-number-4"&gt;6.2.2&lt;/span&gt; More examples of custom capture templates&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-6-2-2"&gt;
&lt;p&gt;
If you've skimmed through the documentation for &lt;code&gt;org-capture&lt;/code&gt;,
there is presumably no need to convince of how flexible capture
templates can be.  You can surely find many examples on the web,
but here are two more:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;&lt;span class="org-comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="org-comment"&gt;Prompt user for a description, displaying the string "Description"&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="org-comment"&gt;Also prompt for a set of tags (%^g) and a inactive timestamp,&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="org-comment"&gt;displaying "Date and time",&lt;/span&gt;
(add-to-list 'org-capture-templates
             '(&lt;span class="org-string"&gt;"c"&lt;/span&gt;
               &lt;span class="org-string"&gt;"Calendar entry"&lt;/span&gt;
               entry
               (file org-default-notes-file)
               &lt;span class="org-string"&gt;"* CAL %^{Description} %^g\n%^{Date and time}T "&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;&lt;span class="org-comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="org-comment"&gt;Insert a new TODO item under the "emails" headline in org-default-notes-file&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="org-comment"&gt;Add a link to the current location (likely the email itself) and a deadline&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="org-comment"&gt;to the next day, by evaluating the elisp s-expression&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="org-comment"&gt;"(org-insert-time-stamp (org-read-date nil t \"+1d\"))"&lt;/span&gt;
(add-to-list 'org-capture-templates
             '(&lt;span class="org-string"&gt;"e"&lt;/span&gt; &lt;span class="org-string"&gt;"email"&lt;/span&gt; entry (file+headline org-default-notes-file &lt;span class="org-string"&gt;"emails"&lt;/span&gt;)
               &lt;span class="org-string"&gt;"* TODO %a %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))"&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org40dc02d" class="outline-3"&gt;
&lt;h3 id="org40dc02d"&gt;&lt;span class="section-number-3"&gt;6.3&lt;/span&gt; Processing captured tasks with org-refile&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-6-3"&gt;
&lt;p&gt;
Capturing must a fast, minimally disruptive action.  The main
purpose of capturing is to get embryonic tasks or projects off your
head as soon and quickly as possible, but with confidence that it
will be processed soon, rather than lost the minute your attention
shifts back to the task at hand.
&lt;/p&gt;

&lt;p&gt;
Most captured items aren't exploitable yet, because they're not
descriptive enough to make it to the main Org file(s).
Consequently, most of my captures target a specific file
&lt;code&gt;inbox.org&lt;/code&gt;, that acts as a repository for ideas, thoughts,
assignments or links to emails awaiting reply or containing
important information. More generally, it's anything that pops up
during the day that is not requesting my attention right away.
&lt;/p&gt;

&lt;p&gt;
Periodically &amp;#x2013; in average once a day &amp;#x2013; this list is reviewed, and
each headline is &lt;i&gt;processed&lt;/i&gt;.  This is when the hard thinking is
done. Each headline must be clarified, its TODO state and set of
tags defined, and its &lt;code&gt;CATEGORY&lt;/code&gt; property set.  This is done
answering several questions such as:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Is this a task? If yes, what's a good description for it?&lt;/li&gt;
&lt;li&gt;Is this a project instead? If yes, what's a good description for
it?  What's the goal?  Does it need planning?  What's the next action?&lt;/li&gt;
&lt;li&gt;Is this something that I want to do?  Does this fit my current priorities?&lt;/li&gt;
&lt;li&gt;Is this something that could or should be done by someone else?&lt;/li&gt;
&lt;li&gt;Do I have to care about this now?&lt;/li&gt;
&lt;li&gt;What's the category for this task/project? (i.e. set &lt;code&gt;CATEGORY&lt;/code&gt; property).&lt;/li&gt;
&lt;li&gt;What's the context for this task/project? (i.e. set collection of tags).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Once a headline in &lt;code&gt;inbox.org&lt;/code&gt; has been processed, it is ready to
enter the collection of main Org files that forms the tasks and
project database.  Again, in my personal case, this is a single
file &lt;code&gt;todo.org&lt;/code&gt;.  Instead of cutting (killing) the headline and
potential sub-trees and pasting (yanking) it at the right location
in the destination Org file, Org provides the function
&lt;code&gt;org-refile&lt;/code&gt;, that helps with moving headlines around, whether it
is between headlines in a single file, or across files.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org891982f" class="outline-4"&gt;
&lt;h4 id="org891982f"&gt;&lt;span class="section-number-4"&gt;6.3.1&lt;/span&gt; &lt;code&gt;org-refile&lt;/code&gt; to move headlines around consistently&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-6-3-1"&gt;
&lt;p&gt;
&lt;code&gt;org-refile&lt;/code&gt; essentially is a convenience wrapper around cutting
and pasting headlines, automatically adjusting the headline level.
Consider the following case:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* A&lt;/span&gt;
&lt;span class="org-org-level-1"&gt;* B&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Refiling &lt;code&gt;B&lt;/code&gt; to &lt;code&gt;A&lt;/code&gt; leads to:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* A&lt;/span&gt;
&lt;span class="org-org-level-2"&gt;** B&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It is also possible to refile headlines across files. The variable
&lt;code&gt;org-refile-targets&lt;/code&gt; must then be a list of the target files,
together with some specification of which headlines in the target
files are eligible to be refile targets.  For example with
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-refile-targets
      '((&lt;span class="org-string"&gt;"A.org"&lt;/span&gt; . (&lt;span class="org-builtin"&gt;:todo&lt;/span&gt; . &lt;span class="org-string"&gt;"TODO"&lt;/span&gt;))
        (&lt;span class="org-string"&gt;"B.org"&lt;/span&gt; . (&lt;span class="org-builtin"&gt;:maxlevel&lt;/span&gt; . 1))
        (&lt;span class="org-string"&gt;"B.org"&lt;/span&gt; . (&lt;span class="org-builtin"&gt;:tag&lt;/span&gt; . &lt;span class="org-string"&gt;"MEETING"&lt;/span&gt;))))

&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
the target headline will be selected among a set made of
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;any headline with TODO state &lt;code&gt;TODO&lt;/code&gt; in file &lt;code&gt;A.org&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;any top level headline or headline with tag &lt;code&gt;MEETING&lt;/code&gt; in file &lt;code&gt;B.org&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgef8e699" class="outline-4"&gt;
&lt;h4 id="orgef8e699"&gt;&lt;span class="section-number-4"&gt;6.3.2&lt;/span&gt; Clearing the inbox with &lt;code&gt;org-refile&lt;/code&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-6-3-2"&gt;
&lt;p&gt;
My main use of &lt;code&gt;org-refile&lt;/code&gt; is to move processed tasks/projects
from the &lt;code&gt;inbox.org&lt;/code&gt; (where captured items go) to the main Org
file &lt;code&gt;todo.org&lt;/code&gt;.  Using &lt;code&gt;org-refile&lt;/code&gt; is faster and less
error-prone than manually cutting/pasting headlines around.  This
simple use of &lt;code&gt;org-refile&lt;/code&gt; makes for a simple &lt;code&gt;org-refile-targets&lt;/code&gt;
variable:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-refile-targets '((&lt;span class="org-string"&gt;"todo.org"&lt;/span&gt; &lt;span class="org-builtin"&gt;:maxlevel&lt;/span&gt; . 1)
                           (&lt;span class="org-string"&gt;"someday.org"&lt;/span&gt; &lt;span class="org-builtin"&gt;:maxlevel&lt;/span&gt; . 1)))

&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This means that processed tasks in &lt;code&gt;inbox.org&lt;/code&gt; can be refiled
under any top level headlines in either files &lt;code&gt;todo.org&lt;/code&gt; and
&lt;code&gt;someday-maybe.org&lt;/code&gt;.  
&lt;/p&gt;

&lt;p&gt;
That's useful to refile tasks to their respective project
headline, but how do we refile items as top level headlines in
&lt;code&gt;todo.org&lt;/code&gt; or &lt;code&gt;someday.org&lt;/code&gt;, &lt;i&gt;i.e.&lt;/i&gt; how do we refile standalone
tasks or projects?  The trick is:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-refile-use-outline-path 'file)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
following which the target file itself can be selected as the
refile target and the headline appended as a top level headline in
that file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org06c07bc" class="outline-2"&gt;
&lt;h2 id="org06c07bc"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; Archiving&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Archiving is basically refiling to the archive file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c C-x C-a&lt;/code&gt; invokes command specified in &lt;code&gt;org-archive-default-command&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Defaults to &lt;code&gt;org-archive-subtree&lt;/code&gt; (&lt;code&gt;C-x C-c C-s&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Archiving regularly keeps your file(s) compact.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
See &lt;a href="https://orgmode.org/manual/Archiving.html"&gt;9.2 Archiving&lt;/a&gt; in the Org manual.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdecf724" class="outline-2"&gt;
&lt;h2 id="orgdecf724"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; Further topics&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/manual/Attachments.html"&gt;Attachments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/manual/Clocking-Work-Time.html"&gt;Clocking tasks&lt;/a&gt; and &lt;a href="https://orgmode.org/manual/Effort-Estimates.html#Effort-Estimates"&gt;effort estimates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
Org can manage bibliographies, see &lt;a href="https://github.com/jkitchin/org-ref"&gt;org-ref&lt;/a&gt;. 
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
There are several ongoing efforts to port Org Mode editing
support for text editors other than GNU Emacs. See &lt;a href="https://github.com/axvr/org.vim"&gt;org.vim&lt;/a&gt; or
&lt;a href="https://github.com/jceb/vim-orgmode"&gt;vim-orgmode&lt;/a&gt;, &lt;a href="https://atom.io/packages/org-mode"&gt;org-mode for Atom&lt;/a&gt;, &lt;a href="https://github.com/vscode-org-mode/vscode-org-mode"&gt;vscode-org-mode&lt;/a&gt; or &lt;a href="https://packagecontrol.io/packages/orgmode"&gt;orgmode for Sublime
Text 2 &amp;amp; 3&lt;/a&gt;. In addition, &lt;a href="https://github.com/200ok-ch/organice"&gt;organice&lt;/a&gt; re-implements Org using web
technologies, &lt;i&gt;i.e&lt;/i&gt; in the browser.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</content><category term="Emacs"></category><category term="Emacs"></category><category term="Org"></category></entry></feed>